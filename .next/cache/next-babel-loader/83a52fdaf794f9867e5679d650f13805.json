{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport web3 from './web3.js';\n\nvar Storage = require('./ethereum/build/contracts/Storage.json');\n\nconsole.log(Storage.abi);\nvar instance;\n\nvar init = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var networkId, deployedAddress;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3.eth.net.getId();\n\n          case 2:\n            networkId = _context.sent;\n            deployedAddress = Storage.networks[networkId].address;\n            instance = new web3.eth.Contract(Storage.abi, deployedAddress);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\ninit();\nexport default instance;","map":{"version":3,"sources":["/home/cryptokowsik/Dapp-dev-nextjs/StorageInstance.js"],"names":["web3","Storage","require","console","log","abi","instance","init","eth","net","getId","networkId","deployedAddress","networks","address","Contract"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;;AACA,IAAMC,OAAO,GAAEC,OAAO,CAAC,yCAAD,CAAtB;;AACAC,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,GAApB;AACA,IAAIC,QAAJ;;AACA,IAAMC,IAAI;AAAA,sEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBP,IAAI,CAACQ,GAAL,CAASC,GAAT,CAAaC,KAAb,EADjB;;AAAA;AACDC,YAAAA,SADC;AAEDC,YAAAA,eAFC,GAEkBX,OAAO,CAACY,QAAR,CAAiBF,SAAjB,EAA4BG,OAF9C;AAIPR,YAAAA,QAAQ,GAAG,IAAIN,IAAI,CAACQ,GAAL,CAASO,QAAb,CAAsBd,OAAO,CAACI,GAA9B,EAAkCO,eAAlC,CAAX;;AAJO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;;AAAA,kBAAJL,IAAI;AAAA;AAAA;AAAA,GAAV;;AAMAA,IAAI;AACJ,eAAeD,QAAf","sourcesContent":["import web3 from './web3.js';\nconst Storage =require('./ethereum/build/contracts/Storage.json');\nconsole.log(Storage.abi)\nlet instance;\nconst init=async ()=>{\n    const networkId = await web3.eth.net.getId();\n    const deployedAddress =  Storage.networks[networkId].address;\n\n    instance = new web3.eth.Contract(Storage.abi,deployedAddress);\n}\ninit();\nexport default instance;"]},"metadata":{},"sourceType":"module"}