{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar web3 = require('./web3.js');\n\nvar Storage = require('./ethereum/build/contracts/Storage.json');\n\nconsole.log(Storage.networks);\nvar instance;\n\nvar init = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var networkId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3.eth.net.getId();\n\n          case 2:\n            networkId = _context.sent;\n            instance = new web3.eth.Contract(Storage.abi, Storage.networks[networkId].address);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\ninit();\nmodule.exports = instance;","map":{"version":3,"sources":["/home/cryptokowsik/Dapp-dev-nextjs/StorageInstance.js"],"names":["web3","require","Storage","console","log","networks","instance","init","eth","net","getId","networkId","Contract","abi","address","module","exports"],"mappings":";;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,IAAMC,OAAO,GAAED,OAAO,CAAC,yCAAD,CAAtB;;AACAE,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,QAApB;AACA,IAAIC,QAAJ;;AACA,IAAMC,IAAI;AAAA,sEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBP,IAAI,CAACQ,GAAL,CAASC,GAAT,CAAaC,KAAb,EADjB;;AAAA;AACDC,YAAAA,SADC;AAGPL,YAAAA,QAAQ,GAAG,IAAIN,IAAI,CAACQ,GAAL,CAASI,QAAb,CAAsBV,OAAO,CAACW,GAA9B,EAAkCX,OAAO,CAACG,QAAR,CAAiBM,SAAjB,EAA4BG,OAA9D,CAAX;;AAHO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;;AAAA,kBAAJP,IAAI;AAAA;AAAA;AAAA,GAAV;;AAKAA,IAAI;AACJQ,MAAM,CAACC,OAAP,GAAkBV,QAAlB","sourcesContent":["const web3 = require('./web3.js');\nconst Storage =require('./ethereum/build/contracts/Storage.json');\nconsole.log(Storage.networks)\nlet instance;\nconst init=async ()=>{\n    const networkId = await web3.eth.net.getId();\n\n    instance = new web3.eth.Contract(Storage.abi,Storage.networks[networkId].address);\n}\ninit();\nmodule.exports =  instance;"]},"metadata":{},"sourceType":"script"}