{"ast":null,"code":"var _jsxFileName = \"/home/cryptokowsik/Dapp-dev-nextjs/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport web3 from '../web3.js';\nimport Storage from '../ethereum/build/contracts/Storage.json';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getName\", async (StorageInstance, accounts) => {\n      //const name = await StorageInstance.methods.name().call();\n      console.log(StorageInstance);\n    });\n  }\n\n  static async getInitialProps() {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const StorageDeployedAddress = Storage.networks[networkId].address;\n      const StorageInstance = await new web3.eth.Contract(Storage.abi, StorageDeployedAddress);\n      return {\n        accounts,\n        StorageInstance\n      };\n    } catch (err) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.log(error);\n    }\n  }\n\n  render() {\n    const {\n      accounts,\n      StorageInstance\n    } = this.props;\n    this.getName(StorageInstance, accounts);\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, \"Contract address: \", StorageInstance.options.address));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/cryptokowsik/Dapp-dev-nextjs/pages/index.js"],"names":["React","Component","web3","Storage","App","StorageInstance","accounts","console","log","getInitialProps","eth","getAccounts","networkId","net","getId","StorageDeployedAddress","networks","address","Contract","abi","err","alert","error","render","props","getName","options"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,OAAP,MAAoB,0CAApB;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA2B;AAAA;AAAA;;AAAA,qCAgBf,OAAMI,eAAN,EAAsBC,QAAtB,KAAiC;AACrC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ;AACH,KAnBsB;AAAA;;AACvB,eAAaI,eAAb,GAA8B;AAC1B,QAAG;AACC,YAAMH,QAAQ,GAAG,MAAMJ,IAAI,CAACQ,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMC,SAAS,GAAG,MAAMV,IAAI,CAACQ,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMC,sBAAsB,GAAGZ,OAAO,CAACa,QAAR,CAAiBJ,SAAjB,EAA4BK,OAA3D;AACA,YAAMZ,eAAe,GAAG,MAAM,IAAIH,IAAI,CAACQ,GAAL,CAASQ,QAAb,CAAsBf,OAAO,CAACgB,GAA9B,EAAmCJ,sBAAnC,CAA9B;AACA,aAAO;AAACT,QAAAA,QAAD;AAAWD,QAAAA;AAAX,OAAP;AACH,KAND,CAMC,OAAMe,GAAN,EAAU;AACPC,MAAAA,KAAK,CACA,wEADA,CAAL;AAGEd,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACL;AAEJ;;AAKDC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACjB,MAAAA,QAAD;AAAWD,MAAAA;AAAX,QAA4B,KAAKmB,KAAvC;AACA,SAAKC,OAAL,CAAapB,eAAb,EAA6BC,QAA7B;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAuBD,eAAe,CAACqB,OAAhB,CAAwBT,OAA/C,CADJ,CADJ;AAKH;;AA5BsB;;AA8B3B,eAAeb,GAAf","sourcesContent":["import React ,{Component} from 'react';\nimport web3 from '../web3.js';\nimport Storage from '../ethereum/build/contracts/Storage.json'; \nclass App extends Component{\n    static async getInitialProps(){\n        try{\n            const accounts = await web3.eth.getAccounts();\n            const networkId = await web3.eth.net.getId();\n            const StorageDeployedAddress = Storage.networks[networkId].address;\n            const StorageInstance = await new web3.eth.Contract(Storage.abi, StorageDeployedAddress);\n            return {accounts, StorageInstance}\n        }catch(err){\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n              );\n              console.log(error);\n        }\n        \n    }\n    getName=async(StorageInstance,accounts)=>{\n        //const name = await StorageInstance.methods.name().call();\n        console.log(StorageInstance)\n    }\n    render(){\n        const {accounts, StorageInstance}=this.props;\n        this.getName(StorageInstance,accounts)\n        return(\n            <div>\n                <h1>Contract address: {StorageInstance.options.address}</h1>\n            </div>\n        )\n    }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}